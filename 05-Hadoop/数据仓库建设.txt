数据仓库工程师转型路线
    传统数仓->离线数仓(批数据处理)->实时数仓(流数据处理)->lambda架构->kappa架构(流批一体)
    https://zhuanlan.zhihu.com/p/259730736

1、数仓建设
1.1、数仓层级介绍
    数据采集层: 获取源系统数据
        数据文件
        校验文件
        交换位置
        处理方式
        传输方式
    数据缓存层(STG):预处理层，存储每天的增量数据，表和ODS/ODM层表一致
    数据贴源层(ODM):和ODS功能类似
    操作数据层(ODS):(Operational Data Store)，存储所有基础数据，做简单的数据清洗、类型转换、数据统一
    明细数据层(DWD):(Data Warehouse Detail)，模型层，采用维度退化的方法，将维度退化到事实表中，减少事实表和维度表的关联，提高明细表的易用性
    汇总数据层(DWS):(Data Warehouse Summay)，汇总层，采用更多的宽表化手段，构建公共指标数据层。通用汇总数据，统一业务口径，数据轻度汇总，保留历史。
    应用数据层(ADS):(Application Data Store)，应用层，存放数据产品个性化的统计指标数据，主要面向前端展现。面向需求，按需定制。
        指标
        管理驾驶舱
        监管报送
        元数据管理
        风险管理
        管理会计
        资产负债
        监管合规
    数据集市层: 面向需求，按需定制。数据集市层和数据仓库在各分层上可以是并列关系
        管理会计集市
        风险管理集市
        客户关系集市
        财务管理集市
        管理报表集市
        管理驾驶舱
    公共维度层(DIM):
    数据展现层:
        固定报表
        维度分析(OLAP)
        即席查询
        数据挖掘


1.2、建设阶段
    基础建设期: 技术主导，业务参与
        数据梳理
        基础模型建设
        关键指标查询
        元数据管理
        
    价值发挥期: 业务需求，技术支持
        数据整合
        数据治理
        专题应用
        展示集成
    业务推动期: 业务主动，技术服务
        数据开放
        创新业务
        数据驱动


1.3、指标
    指标是为了进行口径的统一，口径管理的标准化。有 明细指标&汇总指标。
    线上统一的口径管理体系。
    数据字典的标准化口径。
1.3.1、财务集市指标-明细指标
    搭建以中间层指标为底层的的财务集市数据体系，形成高效的、准确的、结构化的财务数据管理流程。
    1) 统一财务各用户部门的数据底层（核算、管报、资债、报告），消除口径不一问题、底层数据抽取方式造成的表间核对工作以及表间差异；
    2) 搭建统一管理的结构化 “数据口径字典”，便于各方了解我们现在出具各类数据的真实口径，减少与其他部门的口径解释、核对工作；
    3) 数据本身形成自下而上的串联，减少重复的数据验证；
    4) 为分析工作打好数据基础，“指标+维度”可以直接被使用，进行自助化的数据统计及多元化分析。

1.3.2、管理驾驶舱-汇总指标



2、模型设计
2.1、模型设计原则
    1) 底层业务的数据驱动为导向，进行整体层级建设。同时结合业务需求驱动，进行单模块，单业务线建设。
    2) 底层业务变动与上层需求变动对模型冲击最小化
    3) 数据仓库底层，不是特别适用于维度建模方法(为什么)
		ER模型，实体关系模型。面向主题，按业务分析，使用实体关系模型进行组织。teredata的FS-LDM金融模型
    
2.2、范式建模
2.3、实体关系建模(ER模型)(Bill Inmon)
    自下而上，面向数据
    用实体关系模型描述企业业务，在范式理论上符合3NF。
    数据仓库中的3NF和OLTP系统中的3NF的区别在于，它是站在企业角度面向主题的抽象，而不是针对某个具体业务流程的实体对象关系的抽象。
    特点：
        需要全面了解企业业务和数据
        实施周期非常长
        对建模人员的能力要求非常高
    典型代表：
        Teradata公司基于金融业务发布的FS-LDM。
        它通过对金融业务的高度的抽象和总结，将金融业务划分为10大主题，并以设计面向金融仓库模型的核心为基础，企业基于此模型做适当调整和扩展就能快速落地实施。
    缺点：
        在不太成熟、快速变化的业务面前，构建ER模型的风险非常大，不太适合去构建ER模型。

2.4、维度建模(Ralph Kimball)
    自上而下，面向需求
    事实表&维度表 维度&度量
    星型模型
        一个事实表&多个维度表(维度表不再分)
    雪花模型
        一个事实表&多个维度表(维度表依据范式模型再次进行拆分)
    星座模型
        多个事实表&多个维度表(事实表共用维度表)
    
    围绕业务流程构建维度模型
        选择业务过程: 根据业务建模需求，确定业务范围。确定具体业务流程中的具体业务环节。
            在一个业务模型的整个业务环节中，确认/选择需要建模的业务过程。每个业务过程可能都需要创建一张事实表。
            业务处理过程是机构中进行的一般都有业务系统提供支持的自然业务活动
        确认粒度: 声明粒度意味着精确定义一行数据表示什么。是什么级别的数据。例如: 贷款单，订单，账单，分期单。部门，个人...
        确认维度: 维度的主要作用是描述业务的事实，主要表示的“何时，何地，和人”等信息
            维度的粒度必须与确认的事实表中的粒度一致。
        确认事实: 此处的事实，是指业务中的度量值，例如订单金额、下单次数等。
            确认哪些事实要在事实表中出现。明显属于不同粒度的事实必须放在单独的事实表中。
    
    维度表
        退化维度
        缓慢变化维
        产品维
        日期维
        角色维
        杂项维
        ...
    事实表
        事务事实表
        周期快照事实表
        累计快照事实表
    
    一致性维度
        当不同的维度表的属性具有相同列名和领域内容时，称维度表具有一致性。数据仓库的能力直接与维度属性的质量和深度成正比，数据仓库70%的工作量和复杂度是用在构建一致性维度
    一致性事实
        每个度量在整个数据仓库中都有唯一的统计口径，为了避免歧义，一个度量只有唯一的业务术语。
    
    
2.5、维度标准化(意义&方法)
    1、What一致性维度
        当不同的维度表的属性具有相同列名和领域内容时，称维度表具有一致性。数据仓库的能力直接与维度属性的质量和深度成正比，数据仓库70%的工作量和复杂度是用在构建一致性维度
    2、Why一致性维度
        首先是容易管理，一致性维度不仅规范化，而且大大减少维度表的数量。
        其次是容易使用，同一主题或者实体的维度表单一，容易获取和使用。所有的事实共享同样的维度，容易进行交叉计算以及报表展现。
        最后是容易数据获取，应用层分析或者挖掘，能从更全面、更深层次的块、准、有效的获取数据
    3、When一致性维度
        按照维度建模四部曲，构建一致性维度在选取业务过程和定义粒度之后：选取业务过程->定义粒度->构建一致性维度->确定事实
    4、How一致性维度
        首先对业务过程进行梳理，将业务过程所携带的维度信息整理出来生成总线矩阵。一般情况同属一个价值链的业务过程的维度信息大致相同。
        然后针对每个维度逐一审核相关的业务过程，对各个业务过程的维度值进行标准化。之后是对不同的业务的维度信息进行汇总，选择或者生成主键。
        最后设计维度表，并进行适当的迭代更新。
    
    5、一致性维度的使用范围
        数仓IDM/SDM、各集市BC层(公共层)
    6、一致性维度的适用对象
        数仓模型设计人员、各集市管理人员、集市基础层建设人员、模型评审人员
        

2.6、星型模型与雪花模型比较
    1、两种模型优缺点
        星型模型-优点：
            针对各维表会进行大量的预处理，提高关联效率
        星型模型-缺点：
            对比雪花模型，冗余更多，占用存储空间比较多
        雪花模型-优点：
            对比星型模型，冗余更少，减少存储空间，层次性好
        雪花模型-缺点：
            对比星型模型，需要进行更多的预处理，逻辑更加复杂；使用的时候需要更多的关联，关联效率更低；
    
    2、两种模型比较(星型模型&雪花模型)
        1) 星型模型通过预连接和建立有选择的数据冗余，为用户访问和分析过程大大简化了数据。
        2) 星型模型效率比较高，因为雪花模型维表层次多，查询的时候连接操作较多。
        3) 雪花模型通过最大限度的减少数据存储量以及联合较小的维表来改善查询性能。
        4) 雪花模型增加了用户必须处理的表数量，增加了某些查询的复杂性，但这种方式可以使系统进一步专业化和实用化，同时降低了系统的通用程度。 
        5) 雪花模型的维表可能是规范化形式，以便减少冗余，易于维护，节省存储空间。

    3、两种模型选项建议： 
        1) 星型模型结构效率上优于雪花模型，首选星型模型
        2) 如果存储空间上存在瓶颈，可以考虑使用雪花模型
        3) 如果维护方面要求简便性，可以考虑使用雪花模型

2.7、范式建模与维度建模的区别
    1、维度建模与范式建模的概念
        1) 维度建模是基于实体和事实的关系对数据进行建模，将数据组织成数据仓库中的星型模型或雪花模型。维度建模注重建模实体和属性之间的关系，将数据组织成易于理解和查询的形式。
        2) 范式建模是基于范式理论对数据进行建模，通过将数据分解成多个关系表，消除数据冗余，使得数据的修改更加方便和高效。范式建模注重规范化建模，强调实体和属性之间的规范化关系。
    2、区别: 数据建模方式
        1) 维度建模是基于实体和事实的关系对数据进行建模，将数据组织成数据仓库中的星型模型或雪花模型。
        2) 范式建模是基于范式理论对数据进行建模，通过将数据分解成多个关系表，使得数据的修改更加方便和高效。
    3、区别: 数据冗余处理
        1) 维度建模相对于范式建模，存在一定程度上的数据冗余。但是，维度建模中的数据冗余是有可控范围的，并且可以通过一些技术手段进行优化处理，以达到更高的查询效率。
        2) 范式建模通过消除数据冗余，减少了数据的存储空间，但是在查询效率方面可能不如维度建模。
    4、区别: 查询效率不同
        1) 维度建模的查询效率相对较高，因为它将数据组织成易于理解和查询的形式，并将不同维度的数据分别存储，以便于多维数据分析。
        2) 范式建模在查询时需要进行多表联查操作，可能会影响查询效率。
    5、区别: 数据预处理
        1) 维度建模中通常需要进行一些数据预处理工作，例如事实表数据的聚合、分区等操作，以便于实现更高效的查询。
        2) 范式建模则更注重数据规范化，避免数据冗余和重复。
    6、区别: 数据可维护性
        1) 维度建模更注重数据的查询和分析，可维护性略逊于范式建模
        2) 范式建模强调实体和属性之间的规范化关系，使得数据的修改更加方便和高效。
	7、区别：模型扩展性
		1) 
		2) 

2.8、维度建模技术和企业数仓建模区别

2.9、数仓分层建设原因
    1、清晰数据结构
        每个层级都有各自的作用域。我们在使用表的时候能更方便的定位和理解
    2、方便数据血缘追踪
        数仓下游有各种各样的应用和报表。某一个表出问题的时候，根据血缘关系，可以很快速的定位到出问题的地方
    3、减少重复开发
        规范数据分层，开发一些通用的中间模型，可以减少很多重复的开发
    4、复杂问题简单化
        可以把一个复杂的问题，拆分成很多简单的问题来处理。每一层只处理一个简单步骤，便于维护数据准确性。当数据出问题不用整体全部修复，从出问题的地方开始修复即可
    5、屏蔽原始数据的变更和异常
        当原始业务系统发生什么变更或者出现数据异常，可以在和原始数据对接的层级里面进行屏蔽或者改造。一般不必改造所有层级的逻辑。

2.10、模型设计流程
    1、模型：所谓模型，即为入仓模型，也就是数据仓库模型。
    2、数据仓库模型：按系统分析、按主题划分；对系统进行表级分析，入十大主题；对表进行字段级分析，分析字段是否入仓，入仓字段是否抽取整合；
    3、模型字段级分析：
        1) 是否入仓：一张入仓表中，总有一些字段是无用的，即为不需入仓字段，其余字段入仓。
        2) 是否整合：一张表的入仓字段中总有一些字段是可以抽取出来和其它表的字段进行整合的，整合而成的表或是宽表（主表）、或是窄表。
    4、模型宽表：存储一些基本信息的表（一般基本信息字段较多）。例如：当事人基本信息表（存储所有类型客户的基本信息）。
    5、模型窄表：存储某一个基本信息的表（一般主要是为了存储一项信息）。例如：当事人物理地址信息表（存储所有类型客户的物理地址信息）。
    6、模型表的整合：可以有两种方式的整合。
        1) 抽取一些表的共性字段，得出共性表。
        2) 关联一些表得出一些可以放到同一张表中的字段。
    7、模型设计
        业务驱动（根据业务需求：例如配合绩效供数、存贷款标准化报送等）
        数据驱动（根据已有模型样例参考（例如TD模型），从源系统确定入仓整合表）
    
    梳理了解业务模式、业务逻辑
    确定建模目标、模型覆盖范围
    找业务研发沟通，梳理业务模式对应业务库表及数据流程。
    分析现有模型及取数范围(业务系统&业务范围&业务库表)
    分析业务库表及关联关系，梳理交易表&维表等关系
    梳理需求覆盖范围和已有模型覆盖范围的业务重合度、模型字段重合度、确认是使用已有模型扩展业务范围、字段范围，还是需要新建模型进行处理


3、传统数仓和大数据数仓
https://zhuanlan.zhihu.com/p/259730736
3.1、数据仓库概念
    面向主题的，集成的，相对稳定的，反应历史变化的数据集合，用于支持管理决策。
    面向主题的，沉淀历史不可变信息，对明细数据进行汇总的，为决策提供在线分析服务的数据技术的集合。
    
3.2、区别
    数仓设计工具: 没区别
        传统数仓: PD,ERWin
        大数据数仓: PD,ERWin
    数仓建模: 没区别
        传统数仓: 维度+Cube
        大数据数仓: 宽表+Cube
    数据处理(ETL): 基本没区别
        传统数仓: kettle
        大数据数仓: kettle,Sqoop
    调度工具: 区别不大
        传统数仓: 传统ETL工具
        大数据数仓: Oozie等
    数据存储: 区别很大
        传统数仓: Oracle等单体数据库
        大数据数仓: Hadoop,TiDB等集群
    数据计算: 区别很大
        传统数仓: SQL计算引擎
        大数据数仓: MapReduce,Spark,Flink
    数据架构: 区别很大
        传统数仓: 离线数仓+BI
        大数据数仓: 离线数仓+实时数仓+各种展示
        
3.3、区别说明
    数仓设计的工具都是一样的，不会变
    由于大数据集群中，表关联的代价比较大，因此数仓建模会更多的使用宽表，这里由一些变化
    数据处理和调度工具用kettle基本都可以，没啥变化。大数据里面会有sqoop，flume等
    数据存储会有很大差别，传统是单体数据库，大数据是分布式集群。
    数据计算引擎由很大变化，也是单体数据库和集群数据库的差别。分布式计算会有数据倾斜、join代价高等问题。优化方法和方向不一样
    数据总体架构设计会有变化，传统数仓有个BI工具就可以了，但数据可能面对各种复杂需求，所有涉及组件很多


3.4、技术工具
    数据采集
        传统数仓: Oracle.sqlplus, Oracle.expdp
        大数据数仓: 
            离线: sqoop
            实时: flume
    数据传输
        传统数仓: FTP,SFTP,SCP等数据传输工具
        大数据数仓: 
            离线: sqoop
            实时: kafka
    数据加载
        传统数仓: Oracle.sqlldr,Oracle.impdp,Netezza.sqlload
        大数据数仓: 
            离线: sqoop
            实时: flink
    ETL工具
        传统数仓: Durring,informatic,datastage,kettle
        大数据数仓: 
            离线: Oozie
            实时: Oozie
    数据存储
        传统数仓: Oracle,DB2,Netezza
        大数据数仓: 
            离线: HDFS,HBase
            实时: kafka
    数据计算
        传统数仓: 关系型数据库引擎,Oracle,Netezza
        大数据数仓: 
            离线: MapReduce,Spark
            实时: flink,SparkStreaming
    数据查询
        传统数仓: SQL
        大数据数仓: 
            普通查询: Hive(MapReduce),Spark,Tez
            即席查询: Presto,Impala
    调度脚本
        传统数仓: 存储过程,函数,视图
        大数据数仓: 
            离线: python,perl,shell
            实时: 
    数据导出
        传统数仓: Oracle.sqlplus,Oracle.expdp
        大数据数仓: 
            离线: sqoop
            实时: flink
    数据分析
        传统数仓: 
        大数据数仓: 
            CK: ClickHouse
            ES: SparkElasticSearch
            KY: Kylin
    可视化展现
        传统数仓: Congons,帆软BI,帆软report,用于NC
        大数据数仓: 帆软BI,帆软report,ABI

 
4、数据管理(DAMA)
    数据质量
    数据安全
    元数据管理(元数据、数据地图、血缘关系)
    数据治理
    主数据与参考数据管理
    
    数据存储与操作管理
    文件和内容管理
    
    数据架构
    模型设计
    数据整合与互操作
    数据仓库与商务智能



5、未来几年的规划
    现有数仓基础思维以及方法在新环境复用
    不同环境，不同业务条线数仓&集市建设思维、方式整合
    锻炼数仓整体建设能力+基础技术锻炼+数据管理功能实践锻炼(数据治理、元数据管理、数据质量、数据服务)
    锻炼数仓架构相关能力，架构能力与技术能力相结合
    在提升自己的过程中进行整体思维打通
